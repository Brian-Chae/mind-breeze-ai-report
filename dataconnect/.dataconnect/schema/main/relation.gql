extend type AIReportUsage {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "AIReportUsage", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `AIReportUsage` table.
  """
  _count: Int! @fdc_generated(from: "AIReportUsage", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `AIReportUsage` table where the `creditCost` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  creditCost_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "AIReportUsage.creditCost", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `AIReportUsage` table where the `feedback` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  feedback_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "AIReportUsage.feedback", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `AIReportUsage` table where the `generatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  generatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "AIReportUsage.generatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `AIReportUsage` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "AIReportUsage.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `AIReportUsage` table where the `organizationId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  organizationId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "AIReportUsage.organizationId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `AIReportUsage` table where the `qualityScore` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  qualityScore_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "AIReportUsage.qualityScore", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `AIReportUsage` table where the `reportContent` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  reportContent_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "AIReportUsage.reportContent", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `AIReportUsage` table where the `reportType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  reportType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "AIReportUsage.reportType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `AIReportUsage` table where the `sessionDataId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  sessionDataId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "AIReportUsage.sessionDataId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `AIReportUsage` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "AIReportUsage.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `creditCost` field in the `AIReportUsage` table.
  """
  creditCost_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "AIReportUsage.creditCost", purpose: QUERY_SUM)
  """
  ✨ Sum the `qualityScore` field in the `AIReportUsage` table.
  """
  qualityScore_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "AIReportUsage.qualityScore", purpose: QUERY_SUM)
  """
  ✨ Average the `creditCost` field in the `AIReportUsage` table.
  """
  creditCost_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "AIReportUsage.creditCost", purpose: QUERY_AVG)
  """
  ✨ Average the `qualityScore` field in the `AIReportUsage` table.
  """
  qualityScore_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "AIReportUsage.qualityScore", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `creditCost` field in the `AIReportUsage` table.
  """
  creditCost_min: Int @fdc_generated(from: "AIReportUsage.creditCost", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `generatedAt` field in the `AIReportUsage` table.
  """
  generatedAt_min: Timestamp @fdc_generated(from: "AIReportUsage.generatedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `qualityScore` field in the `AIReportUsage` table.
  """
  qualityScore_min: Float @fdc_generated(from: "AIReportUsage.qualityScore", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `creditCost` field in the `AIReportUsage` table.
  """
  creditCost_max: Int @fdc_generated(from: "AIReportUsage.creditCost", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `generatedAt` field in the `AIReportUsage` table.
  """
  generatedAt_max: Timestamp @fdc_generated(from: "AIReportUsage.generatedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `qualityScore` field in the `AIReportUsage` table.
  """
  qualityScore_max: Float @fdc_generated(from: "AIReportUsage.qualityScore", purpose: QUERY_MAX)
}
extend type BioSignalSession {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "BioSignalSession", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `BioSignalSession` table.
  """
  _count: Int! @fdc_generated(from: "BioSignalSession", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `avgHeartRate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  avgHeartRate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.avgHeartRate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `deviceId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  deviceId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.deviceId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `durationSeconds` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  durationSeconds_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.durationSeconds", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `eegDominantFrequency` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  eegDominantFrequency_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.eegDominantFrequency", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `endTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.endTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `hrvMetrics` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  hrvMetrics_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.hrvMetrics", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `rawDataUri` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  rawDataUri_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.rawDataUri", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `startTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.startTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `stressIndex` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  stressIndex_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.stressIndex", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BioSignalSession` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BioSignalSession.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `avgHeartRate` field in the `BioSignalSession` table.
  """
  avgHeartRate_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BioSignalSession.avgHeartRate", purpose: QUERY_SUM)
  """
  ✨ Sum the `durationSeconds` field in the `BioSignalSession` table.
  """
  durationSeconds_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "BioSignalSession.durationSeconds", purpose: QUERY_SUM)
  """
  ✨ Sum the `eegDominantFrequency` field in the `BioSignalSession` table.
  """
  eegDominantFrequency_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BioSignalSession.eegDominantFrequency", purpose: QUERY_SUM)
  """
  ✨ Sum the `stressIndex` field in the `BioSignalSession` table.
  """
  stressIndex_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BioSignalSession.stressIndex", purpose: QUERY_SUM)
  """
  ✨ Average the `avgHeartRate` field in the `BioSignalSession` table.
  """
  avgHeartRate_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BioSignalSession.avgHeartRate", purpose: QUERY_AVG)
  """
  ✨ Average the `durationSeconds` field in the `BioSignalSession` table.
  """
  durationSeconds_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BioSignalSession.durationSeconds", purpose: QUERY_AVG)
  """
  ✨ Average the `eegDominantFrequency` field in the `BioSignalSession` table.
  """
  eegDominantFrequency_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BioSignalSession.eegDominantFrequency", purpose: QUERY_AVG)
  """
  ✨ Average the `stressIndex` field in the `BioSignalSession` table.
  """
  stressIndex_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BioSignalSession.stressIndex", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `avgHeartRate` field in the `BioSignalSession` table.
  """
  avgHeartRate_min: Float @fdc_generated(from: "BioSignalSession.avgHeartRate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `durationSeconds` field in the `BioSignalSession` table.
  """
  durationSeconds_min: Int @fdc_generated(from: "BioSignalSession.durationSeconds", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `eegDominantFrequency` field in the `BioSignalSession` table.
  """
  eegDominantFrequency_min: Float @fdc_generated(from: "BioSignalSession.eegDominantFrequency", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `endTime` field in the `BioSignalSession` table.
  """
  endTime_min: Timestamp @fdc_generated(from: "BioSignalSession.endTime", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `startTime` field in the `BioSignalSession` table.
  """
  startTime_min: Timestamp @fdc_generated(from: "BioSignalSession.startTime", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `stressIndex` field in the `BioSignalSession` table.
  """
  stressIndex_min: Float @fdc_generated(from: "BioSignalSession.stressIndex", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `avgHeartRate` field in the `BioSignalSession` table.
  """
  avgHeartRate_max: Float @fdc_generated(from: "BioSignalSession.avgHeartRate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `durationSeconds` field in the `BioSignalSession` table.
  """
  durationSeconds_max: Int @fdc_generated(from: "BioSignalSession.durationSeconds", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `eegDominantFrequency` field in the `BioSignalSession` table.
  """
  eegDominantFrequency_max: Float @fdc_generated(from: "BioSignalSession.eegDominantFrequency", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `endTime` field in the `BioSignalSession` table.
  """
  endTime_max: Timestamp @fdc_generated(from: "BioSignalSession.endTime", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `startTime` field in the `BioSignalSession` table.
  """
  startTime_max: Timestamp @fdc_generated(from: "BioSignalSession.startTime", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `stressIndex` field in the `BioSignalSession` table.
  """
  stressIndex_max: Float @fdc_generated(from: "BioSignalSession.stressIndex", purpose: QUERY_MAX)
}
extend type BusinessMetrics {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "BusinessMetrics", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table.
  """
  _count: Int! @fdc_generated(from: "BusinessMetrics", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `activeMemberCount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  activeMemberCount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.activeMemberCount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `avgConsultationRating` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  avgConsultationRating_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.avgConsultationRating", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `avgReportRating` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  avgReportRating_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.avgReportRating", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `completedMeasurements` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  completedMeasurements_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.completedMeasurements", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `completionRate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  completionRate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.completionRate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `consultationsSessions` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  consultationsSessions_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.consultationsSessions", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `creditsConsumed` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  creditsConsumed_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.creditsConsumed", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `generatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  generatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.generatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `npsScore` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  npsScore_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.npsScore", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `organizationId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  organizationId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.organizationId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `participationRate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  participationRate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.participationRate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `periodEnd` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  periodEnd_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.periodEnd", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `periodStart` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  periodStart_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.periodStart", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `reportsGenerated` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  reportsGenerated_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.reportsGenerated", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `scheduledMeasurements` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  scheduledMeasurements_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.scheduledMeasurements", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `BusinessMetrics` table where the `totalMemberCount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  totalMemberCount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "BusinessMetrics.totalMemberCount", purpose: QUERY_COUNT)
  """
  ✨ Sum the `activeMemberCount` field in the `BusinessMetrics` table.
  """
  activeMemberCount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "BusinessMetrics.activeMemberCount", purpose: QUERY_SUM)
  """
  ✨ Sum the `avgConsultationRating` field in the `BusinessMetrics` table.
  """
  avgConsultationRating_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.avgConsultationRating", purpose: QUERY_SUM)
  """
  ✨ Sum the `avgReportRating` field in the `BusinessMetrics` table.
  """
  avgReportRating_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.avgReportRating", purpose: QUERY_SUM)
  """
  ✨ Sum the `completedMeasurements` field in the `BusinessMetrics` table.
  """
  completedMeasurements_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "BusinessMetrics.completedMeasurements", purpose: QUERY_SUM)
  """
  ✨ Sum the `completionRate` field in the `BusinessMetrics` table.
  """
  completionRate_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.completionRate", purpose: QUERY_SUM)
  """
  ✨ Sum the `consultationsSessions` field in the `BusinessMetrics` table.
  """
  consultationsSessions_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "BusinessMetrics.consultationsSessions", purpose: QUERY_SUM)
  """
  ✨ Sum the `creditsConsumed` field in the `BusinessMetrics` table.
  """
  creditsConsumed_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "BusinessMetrics.creditsConsumed", purpose: QUERY_SUM)
  """
  ✨ Sum the `npsScore` field in the `BusinessMetrics` table.
  """
  npsScore_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.npsScore", purpose: QUERY_SUM)
  """
  ✨ Sum the `participationRate` field in the `BusinessMetrics` table.
  """
  participationRate_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.participationRate", purpose: QUERY_SUM)
  """
  ✨ Sum the `reportsGenerated` field in the `BusinessMetrics` table.
  """
  reportsGenerated_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "BusinessMetrics.reportsGenerated", purpose: QUERY_SUM)
  """
  ✨ Sum the `scheduledMeasurements` field in the `BusinessMetrics` table.
  """
  scheduledMeasurements_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "BusinessMetrics.scheduledMeasurements", purpose: QUERY_SUM)
  """
  ✨ Sum the `totalMemberCount` field in the `BusinessMetrics` table.
  """
  totalMemberCount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "BusinessMetrics.totalMemberCount", purpose: QUERY_SUM)
  """
  ✨ Average the `activeMemberCount` field in the `BusinessMetrics` table.
  """
  activeMemberCount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.activeMemberCount", purpose: QUERY_AVG)
  """
  ✨ Average the `avgConsultationRating` field in the `BusinessMetrics` table.
  """
  avgConsultationRating_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.avgConsultationRating", purpose: QUERY_AVG)
  """
  ✨ Average the `avgReportRating` field in the `BusinessMetrics` table.
  """
  avgReportRating_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.avgReportRating", purpose: QUERY_AVG)
  """
  ✨ Average the `completedMeasurements` field in the `BusinessMetrics` table.
  """
  completedMeasurements_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.completedMeasurements", purpose: QUERY_AVG)
  """
  ✨ Average the `completionRate` field in the `BusinessMetrics` table.
  """
  completionRate_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.completionRate", purpose: QUERY_AVG)
  """
  ✨ Average the `consultationsSessions` field in the `BusinessMetrics` table.
  """
  consultationsSessions_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.consultationsSessions", purpose: QUERY_AVG)
  """
  ✨ Average the `creditsConsumed` field in the `BusinessMetrics` table.
  """
  creditsConsumed_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.creditsConsumed", purpose: QUERY_AVG)
  """
  ✨ Average the `npsScore` field in the `BusinessMetrics` table.
  """
  npsScore_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.npsScore", purpose: QUERY_AVG)
  """
  ✨ Average the `participationRate` field in the `BusinessMetrics` table.
  """
  participationRate_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.participationRate", purpose: QUERY_AVG)
  """
  ✨ Average the `reportsGenerated` field in the `BusinessMetrics` table.
  """
  reportsGenerated_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.reportsGenerated", purpose: QUERY_AVG)
  """
  ✨ Average the `scheduledMeasurements` field in the `BusinessMetrics` table.
  """
  scheduledMeasurements_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.scheduledMeasurements", purpose: QUERY_AVG)
  """
  ✨ Average the `totalMemberCount` field in the `BusinessMetrics` table.
  """
  totalMemberCount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "BusinessMetrics.totalMemberCount", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `activeMemberCount` field in the `BusinessMetrics` table.
  """
  activeMemberCount_min: Int @fdc_generated(from: "BusinessMetrics.activeMemberCount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `avgConsultationRating` field in the `BusinessMetrics` table.
  """
  avgConsultationRating_min: Float @fdc_generated(from: "BusinessMetrics.avgConsultationRating", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `avgReportRating` field in the `BusinessMetrics` table.
  """
  avgReportRating_min: Float @fdc_generated(from: "BusinessMetrics.avgReportRating", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `completedMeasurements` field in the `BusinessMetrics` table.
  """
  completedMeasurements_min: Int @fdc_generated(from: "BusinessMetrics.completedMeasurements", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `completionRate` field in the `BusinessMetrics` table.
  """
  completionRate_min: Float @fdc_generated(from: "BusinessMetrics.completionRate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `consultationsSessions` field in the `BusinessMetrics` table.
  """
  consultationsSessions_min: Int @fdc_generated(from: "BusinessMetrics.consultationsSessions", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `creditsConsumed` field in the `BusinessMetrics` table.
  """
  creditsConsumed_min: Int @fdc_generated(from: "BusinessMetrics.creditsConsumed", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `generatedAt` field in the `BusinessMetrics` table.
  """
  generatedAt_min: Timestamp @fdc_generated(from: "BusinessMetrics.generatedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `npsScore` field in the `BusinessMetrics` table.
  """
  npsScore_min: Float @fdc_generated(from: "BusinessMetrics.npsScore", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `participationRate` field in the `BusinessMetrics` table.
  """
  participationRate_min: Float @fdc_generated(from: "BusinessMetrics.participationRate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `periodEnd` field in the `BusinessMetrics` table.
  """
  periodEnd_min: Date @fdc_generated(from: "BusinessMetrics.periodEnd", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `periodStart` field in the `BusinessMetrics` table.
  """
  periodStart_min: Date @fdc_generated(from: "BusinessMetrics.periodStart", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `reportsGenerated` field in the `BusinessMetrics` table.
  """
  reportsGenerated_min: Int @fdc_generated(from: "BusinessMetrics.reportsGenerated", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `scheduledMeasurements` field in the `BusinessMetrics` table.
  """
  scheduledMeasurements_min: Int @fdc_generated(from: "BusinessMetrics.scheduledMeasurements", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `totalMemberCount` field in the `BusinessMetrics` table.
  """
  totalMemberCount_min: Int @fdc_generated(from: "BusinessMetrics.totalMemberCount", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `activeMemberCount` field in the `BusinessMetrics` table.
  """
  activeMemberCount_max: Int @fdc_generated(from: "BusinessMetrics.activeMemberCount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `avgConsultationRating` field in the `BusinessMetrics` table.
  """
  avgConsultationRating_max: Float @fdc_generated(from: "BusinessMetrics.avgConsultationRating", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `avgReportRating` field in the `BusinessMetrics` table.
  """
  avgReportRating_max: Float @fdc_generated(from: "BusinessMetrics.avgReportRating", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `completedMeasurements` field in the `BusinessMetrics` table.
  """
  completedMeasurements_max: Int @fdc_generated(from: "BusinessMetrics.completedMeasurements", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `completionRate` field in the `BusinessMetrics` table.
  """
  completionRate_max: Float @fdc_generated(from: "BusinessMetrics.completionRate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `consultationsSessions` field in the `BusinessMetrics` table.
  """
  consultationsSessions_max: Int @fdc_generated(from: "BusinessMetrics.consultationsSessions", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `creditsConsumed` field in the `BusinessMetrics` table.
  """
  creditsConsumed_max: Int @fdc_generated(from: "BusinessMetrics.creditsConsumed", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `generatedAt` field in the `BusinessMetrics` table.
  """
  generatedAt_max: Timestamp @fdc_generated(from: "BusinessMetrics.generatedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `npsScore` field in the `BusinessMetrics` table.
  """
  npsScore_max: Float @fdc_generated(from: "BusinessMetrics.npsScore", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `participationRate` field in the `BusinessMetrics` table.
  """
  participationRate_max: Float @fdc_generated(from: "BusinessMetrics.participationRate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `periodEnd` field in the `BusinessMetrics` table.
  """
  periodEnd_max: Date @fdc_generated(from: "BusinessMetrics.periodEnd", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `periodStart` field in the `BusinessMetrics` table.
  """
  periodStart_max: Date @fdc_generated(from: "BusinessMetrics.periodStart", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `reportsGenerated` field in the `BusinessMetrics` table.
  """
  reportsGenerated_max: Int @fdc_generated(from: "BusinessMetrics.reportsGenerated", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `scheduledMeasurements` field in the `BusinessMetrics` table.
  """
  scheduledMeasurements_max: Int @fdc_generated(from: "BusinessMetrics.scheduledMeasurements", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `totalMemberCount` field in the `BusinessMetrics` table.
  """
  totalMemberCount_max: Int @fdc_generated(from: "BusinessMetrics.totalMemberCount", purpose: QUERY_MAX)
}
extend type Company {
  """
  ✨ List `CompanyMember` objects in a one-to-many relationship (where `CompanyMember`.`company` is this object).
  """
  companyMembers_on_company(
    """
    Filter condition to narrow down the query results.
    """
    where: CompanyMember_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CompanyMember_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: CompanyMember_Having
  ): [CompanyMember!]! @fdc_generated(from: "CompanyMember.company", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ConsentRecord` objects in a one-to-many relationship (where `ConsentRecord`.`company` is this object).
  """
  consentRecords_on_company(
    """
    Filter condition to narrow down the query results.
    """
    where: ConsentRecord_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ConsentRecord_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ConsentRecord_Having
  ): [ConsentRecord!]! @fdc_generated(from: "ConsentRecord.company", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `CreditTransaction` objects in a one-to-many relationship (where `CreditTransaction`.`company` is this object).
  """
  creditTransactions_on_company(
    """
    Filter condition to narrow down the query results.
    """
    where: CreditTransaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CreditTransaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: CreditTransaction_Having
  ): [CreditTransaction!]! @fdc_generated(from: "CreditTransaction.company", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `MeasurementSession` objects in a one-to-many relationship (where `MeasurementSession`.`company` is this object).
  """
  measurementSessions_on_company(
    """
    Filter condition to narrow down the query results.
    """
    where: MeasurementSession_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MeasurementSession_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MeasurementSession_Having
  ): [MeasurementSession!]! @fdc_generated(from: "MeasurementSession.company", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Company", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Company` table.
  """
  _count: Int! @fdc_generated(from: "Company", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `address` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  address_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.address", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `adminUserId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  adminUserId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.adminUserId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `businessRegistrationNumber` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  businessRegistrationNumber_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.businessRegistrationNumber", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `companyCode` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  companyCode_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.companyCode", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `companyName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  companyName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.companyName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `contactEmail` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contactEmail_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.contactEmail", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `contactPhone` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contactPhone_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.contactPhone", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `contractEndDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contractEndDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.contractEndDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `contractStartDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contractStartDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.contractStartDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `creditBalance` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  creditBalance_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.creditBalance", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `employeeCount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  employeeCount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.employeeCount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `industry` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  industry_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.industry", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `paymentStatus` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  paymentStatus_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.paymentStatus", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `servicePackage` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  servicePackage_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.servicePackage", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `settings` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  settings_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.settings", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Company` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Company.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Sum the `creditBalance` field in the `Company` table.
  """
  creditBalance_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Company.creditBalance", purpose: QUERY_SUM)
  """
  ✨ Sum the `employeeCount` field in the `Company` table.
  """
  employeeCount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Company.employeeCount", purpose: QUERY_SUM)
  """
  ✨ Average the `creditBalance` field in the `Company` table.
  """
  creditBalance_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Company.creditBalance", purpose: QUERY_AVG)
  """
  ✨ Average the `employeeCount` field in the `Company` table.
  """
  employeeCount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Company.employeeCount", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `contractEndDate` field in the `Company` table.
  """
  contractEndDate_min: Date @fdc_generated(from: "Company.contractEndDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `contractStartDate` field in the `Company` table.
  """
  contractStartDate_min: Date @fdc_generated(from: "Company.contractStartDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `Company` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Company.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `creditBalance` field in the `Company` table.
  """
  creditBalance_min: Int @fdc_generated(from: "Company.creditBalance", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `employeeCount` field in the `Company` table.
  """
  employeeCount_min: Int @fdc_generated(from: "Company.employeeCount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `Company` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "Company.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `contractEndDate` field in the `Company` table.
  """
  contractEndDate_max: Date @fdc_generated(from: "Company.contractEndDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `contractStartDate` field in the `Company` table.
  """
  contractStartDate_max: Date @fdc_generated(from: "Company.contractStartDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `Company` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Company.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `creditBalance` field in the `Company` table.
  """
  creditBalance_max: Int @fdc_generated(from: "Company.creditBalance", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `employeeCount` field in the `Company` table.
  """
  employeeCount_max: Int @fdc_generated(from: "Company.employeeCount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `Company` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "Company.updatedAt", purpose: QUERY_MAX)
}
extend type CompanyMember {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "CompanyMember", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `CompanyMember` table.
  """
  _count: Int! @fdc_generated(from: "CompanyMember", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `companyId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  companyId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.companyId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `consultationsUsed` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  consultationsUsed_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.consultationsUsed", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `department` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  department_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.department", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `employeeId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  employeeId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.employeeId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `isActive` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isActive_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.isActive", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `joinedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  joinedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.joinedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `lastActivityAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  lastActivityAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.lastActivityAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `position` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  position_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.position", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `reportsGenerated` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  reportsGenerated_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.reportsGenerated", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CompanyMember` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CompanyMember.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `consultationsUsed` field in the `CompanyMember` table.
  """
  consultationsUsed_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "CompanyMember.consultationsUsed", purpose: QUERY_SUM)
  """
  ✨ Sum the `reportsGenerated` field in the `CompanyMember` table.
  """
  reportsGenerated_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "CompanyMember.reportsGenerated", purpose: QUERY_SUM)
  """
  ✨ Average the `consultationsUsed` field in the `CompanyMember` table.
  """
  consultationsUsed_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "CompanyMember.consultationsUsed", purpose: QUERY_AVG)
  """
  ✨ Average the `reportsGenerated` field in the `CompanyMember` table.
  """
  reportsGenerated_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "CompanyMember.reportsGenerated", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `consultationsUsed` field in the `CompanyMember` table.
  """
  consultationsUsed_min: Int @fdc_generated(from: "CompanyMember.consultationsUsed", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `joinedAt` field in the `CompanyMember` table.
  """
  joinedAt_min: Timestamp @fdc_generated(from: "CompanyMember.joinedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `lastActivityAt` field in the `CompanyMember` table.
  """
  lastActivityAt_min: Timestamp @fdc_generated(from: "CompanyMember.lastActivityAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `reportsGenerated` field in the `CompanyMember` table.
  """
  reportsGenerated_min: Int @fdc_generated(from: "CompanyMember.reportsGenerated", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `consultationsUsed` field in the `CompanyMember` table.
  """
  consultationsUsed_max: Int @fdc_generated(from: "CompanyMember.consultationsUsed", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `joinedAt` field in the `CompanyMember` table.
  """
  joinedAt_max: Timestamp @fdc_generated(from: "CompanyMember.joinedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `lastActivityAt` field in the `CompanyMember` table.
  """
  lastActivityAt_max: Timestamp @fdc_generated(from: "CompanyMember.lastActivityAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `reportsGenerated` field in the `CompanyMember` table.
  """
  reportsGenerated_max: Int @fdc_generated(from: "CompanyMember.reportsGenerated", purpose: QUERY_MAX)
}
extend type ConsentRecord {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ConsentRecord", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ConsentRecord` table.
  """
  _count: Int! @fdc_generated(from: "ConsentRecord", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsentRecord` table where the `companyId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  companyId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsentRecord.companyId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsentRecord` table where the `consentGivenAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  consentGivenAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsentRecord.consentGivenAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsentRecord` table where the `consentText` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  consentText_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsentRecord.consentText", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsentRecord` table where the `consentType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  consentType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsentRecord.consentType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsentRecord` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsentRecord.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsentRecord` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsentRecord.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsentRecord` table where the `isActive` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isActive_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsentRecord.isActive", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsentRecord` table where the `subjectBirthDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  subjectBirthDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsentRecord.subjectBirthDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsentRecord` table where the `subjectName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  subjectName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsentRecord.subjectName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsentRecord` table where the `subjectPhone` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  subjectPhone_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsentRecord.subjectPhone", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `consentGivenAt` field in the `ConsentRecord` table.
  """
  consentGivenAt_min: Timestamp @fdc_generated(from: "ConsentRecord.consentGivenAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `ConsentRecord` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "ConsentRecord.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `subjectBirthDate` field in the `ConsentRecord` table.
  """
  subjectBirthDate_min: Date @fdc_generated(from: "ConsentRecord.subjectBirthDate", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `consentGivenAt` field in the `ConsentRecord` table.
  """
  consentGivenAt_max: Timestamp @fdc_generated(from: "ConsentRecord.consentGivenAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `ConsentRecord` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "ConsentRecord.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `subjectBirthDate` field in the `ConsentRecord` table.
  """
  subjectBirthDate_max: Date @fdc_generated(from: "ConsentRecord.subjectBirthDate", purpose: QUERY_MAX)
}
extend type ConsultationUsage {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ConsultationUsage", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table.
  """
  _count: Int! @fdc_generated(from: "ConsultationUsage", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `consultationType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  consultationType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.consultationType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `creditCost` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  creditCost_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.creditCost", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `duration` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  duration_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.duration", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `endedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.endedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `feedback` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  feedback_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.feedback", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `messages` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  messages_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.messages", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `organizationId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  organizationId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.organizationId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `satisfaction` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  satisfaction_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.satisfaction", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `startedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.startedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ConsultationUsage` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ConsultationUsage.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `creditCost` field in the `ConsultationUsage` table.
  """
  creditCost_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "ConsultationUsage.creditCost", purpose: QUERY_SUM)
  """
  ✨ Sum the `duration` field in the `ConsultationUsage` table.
  """
  duration_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "ConsultationUsage.duration", purpose: QUERY_SUM)
  """
  ✨ Sum the `satisfaction` field in the `ConsultationUsage` table.
  """
  satisfaction_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "ConsultationUsage.satisfaction", purpose: QUERY_SUM)
  """
  ✨ Average the `creditCost` field in the `ConsultationUsage` table.
  """
  creditCost_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ConsultationUsage.creditCost", purpose: QUERY_AVG)
  """
  ✨ Average the `duration` field in the `ConsultationUsage` table.
  """
  duration_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ConsultationUsage.duration", purpose: QUERY_AVG)
  """
  ✨ Average the `satisfaction` field in the `ConsultationUsage` table.
  """
  satisfaction_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "ConsultationUsage.satisfaction", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `creditCost` field in the `ConsultationUsage` table.
  """
  creditCost_min: Int @fdc_generated(from: "ConsultationUsage.creditCost", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `duration` field in the `ConsultationUsage` table.
  """
  duration_min: Int @fdc_generated(from: "ConsultationUsage.duration", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `endedAt` field in the `ConsultationUsage` table.
  """
  endedAt_min: Timestamp @fdc_generated(from: "ConsultationUsage.endedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `satisfaction` field in the `ConsultationUsage` table.
  """
  satisfaction_min: Int @fdc_generated(from: "ConsultationUsage.satisfaction", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `startedAt` field in the `ConsultationUsage` table.
  """
  startedAt_min: Timestamp @fdc_generated(from: "ConsultationUsage.startedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `creditCost` field in the `ConsultationUsage` table.
  """
  creditCost_max: Int @fdc_generated(from: "ConsultationUsage.creditCost", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `duration` field in the `ConsultationUsage` table.
  """
  duration_max: Int @fdc_generated(from: "ConsultationUsage.duration", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `endedAt` field in the `ConsultationUsage` table.
  """
  endedAt_max: Timestamp @fdc_generated(from: "ConsultationUsage.endedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `satisfaction` field in the `ConsultationUsage` table.
  """
  satisfaction_max: Int @fdc_generated(from: "ConsultationUsage.satisfaction", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `startedAt` field in the `ConsultationUsage` table.
  """
  startedAt_max: Timestamp @fdc_generated(from: "ConsultationUsage.startedAt", purpose: QUERY_MAX)
}
extend type Contract {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Contract", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Contract` table.
  """
  _count: Int! @fdc_generated(from: "Contract", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `billingCycle` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  billingCycle_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.billingCycle", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `endDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.endDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `memberCount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  memberCount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.memberCount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `organizationId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  organizationId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.organizationId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `paymentMethod` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  paymentMethod_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.paymentMethod", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `pricePerMember` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  pricePerMember_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.pricePerMember", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `renewalTerms` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  renewalTerms_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.renewalTerms", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `servicePackage` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  servicePackage_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.servicePackage", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `signedById` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  signedById_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.signedById", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `startDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.startDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `totalAmount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  totalAmount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.totalAmount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Contract` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Contract.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Sum the `memberCount` field in the `Contract` table.
  """
  memberCount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Contract.memberCount", purpose: QUERY_SUM)
  """
  ✨ Sum the `pricePerMember` field in the `Contract` table.
  """
  pricePerMember_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Contract.pricePerMember", purpose: QUERY_SUM)
  """
  ✨ Sum the `totalAmount` field in the `Contract` table.
  """
  totalAmount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Contract.totalAmount", purpose: QUERY_SUM)
  """
  ✨ Average the `memberCount` field in the `Contract` table.
  """
  memberCount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Contract.memberCount", purpose: QUERY_AVG)
  """
  ✨ Average the `pricePerMember` field in the `Contract` table.
  """
  pricePerMember_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Contract.pricePerMember", purpose: QUERY_AVG)
  """
  ✨ Average the `totalAmount` field in the `Contract` table.
  """
  totalAmount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Contract.totalAmount", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `Contract` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Contract.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `endDate` field in the `Contract` table.
  """
  endDate_min: Date @fdc_generated(from: "Contract.endDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `memberCount` field in the `Contract` table.
  """
  memberCount_min: Int @fdc_generated(from: "Contract.memberCount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `pricePerMember` field in the `Contract` table.
  """
  pricePerMember_min: Int @fdc_generated(from: "Contract.pricePerMember", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `startDate` field in the `Contract` table.
  """
  startDate_min: Date @fdc_generated(from: "Contract.startDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `totalAmount` field in the `Contract` table.
  """
  totalAmount_min: Int @fdc_generated(from: "Contract.totalAmount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `Contract` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "Contract.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `Contract` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Contract.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `endDate` field in the `Contract` table.
  """
  endDate_max: Date @fdc_generated(from: "Contract.endDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `memberCount` field in the `Contract` table.
  """
  memberCount_max: Int @fdc_generated(from: "Contract.memberCount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `pricePerMember` field in the `Contract` table.
  """
  pricePerMember_max: Int @fdc_generated(from: "Contract.pricePerMember", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `startDate` field in the `Contract` table.
  """
  startDate_max: Date @fdc_generated(from: "Contract.startDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `totalAmount` field in the `Contract` table.
  """
  totalAmount_max: Int @fdc_generated(from: "Contract.totalAmount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `Contract` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "Contract.updatedAt", purpose: QUERY_MAX)
}
extend type CreditPackage {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "CreditPackage", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `CreditPackage` table.
  """
  _count: Int! @fdc_generated(from: "CreditPackage", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditPackage` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditPackage.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditPackage` table where the `creditAmount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  creditAmount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditPackage.creditAmount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditPackage` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditPackage.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditPackage` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditPackage.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditPackage` table where the `isActive` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isActive_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditPackage.isActive", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditPackage` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditPackage.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditPackage` table where the `price` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  price_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditPackage.price", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditPackage` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditPackage.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditPackage` table where the `validityDays` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  validityDays_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditPackage.validityDays", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditPackage` table where the `volumeDiscounts` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  volumeDiscounts_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditPackage.volumeDiscounts", purpose: QUERY_COUNT)
  """
  ✨ Sum the `creditAmount` field in the `CreditPackage` table.
  """
  creditAmount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "CreditPackage.creditAmount", purpose: QUERY_SUM)
  """
  ✨ Sum the `price` field in the `CreditPackage` table.
  """
  price_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "CreditPackage.price", purpose: QUERY_SUM)
  """
  ✨ Sum the `validityDays` field in the `CreditPackage` table.
  """
  validityDays_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "CreditPackage.validityDays", purpose: QUERY_SUM)
  """
  ✨ Average the `creditAmount` field in the `CreditPackage` table.
  """
  creditAmount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "CreditPackage.creditAmount", purpose: QUERY_AVG)
  """
  ✨ Average the `price` field in the `CreditPackage` table.
  """
  price_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "CreditPackage.price", purpose: QUERY_AVG)
  """
  ✨ Average the `validityDays` field in the `CreditPackage` table.
  """
  validityDays_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "CreditPackage.validityDays", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `CreditPackage` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "CreditPackage.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `creditAmount` field in the `CreditPackage` table.
  """
  creditAmount_min: Int @fdc_generated(from: "CreditPackage.creditAmount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `price` field in the `CreditPackage` table.
  """
  price_min: Int @fdc_generated(from: "CreditPackage.price", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `CreditPackage` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "CreditPackage.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `validityDays` field in the `CreditPackage` table.
  """
  validityDays_min: Int @fdc_generated(from: "CreditPackage.validityDays", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `CreditPackage` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "CreditPackage.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `creditAmount` field in the `CreditPackage` table.
  """
  creditAmount_max: Int @fdc_generated(from: "CreditPackage.creditAmount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `price` field in the `CreditPackage` table.
  """
  price_max: Int @fdc_generated(from: "CreditPackage.price", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `CreditPackage` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "CreditPackage.updatedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `validityDays` field in the `CreditPackage` table.
  """
  validityDays_max: Int @fdc_generated(from: "CreditPackage.validityDays", purpose: QUERY_MAX)
}
extend type CreditTransaction {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "CreditTransaction", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `CreditTransaction` table.
  """
  _count: Int! @fdc_generated(from: "CreditTransaction", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `amount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  amount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.amount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `balanceAfter` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  balanceAfter_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.balanceAfter", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `companyId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  companyId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.companyId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `createdById` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdById_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.createdById", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `description` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  description_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.description", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `metadata` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  metadata_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.metadata", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `organizationId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  organizationId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.organizationId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `type` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  type_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.type", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `CreditTransaction` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "CreditTransaction.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `amount` field in the `CreditTransaction` table.
  """
  amount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "CreditTransaction.amount", purpose: QUERY_SUM)
  """
  ✨ Sum the `balanceAfter` field in the `CreditTransaction` table.
  """
  balanceAfter_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "CreditTransaction.balanceAfter", purpose: QUERY_SUM)
  """
  ✨ Average the `amount` field in the `CreditTransaction` table.
  """
  amount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "CreditTransaction.amount", purpose: QUERY_AVG)
  """
  ✨ Average the `balanceAfter` field in the `CreditTransaction` table.
  """
  balanceAfter_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "CreditTransaction.balanceAfter", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `amount` field in the `CreditTransaction` table.
  """
  amount_min: Int @fdc_generated(from: "CreditTransaction.amount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `balanceAfter` field in the `CreditTransaction` table.
  """
  balanceAfter_min: Int @fdc_generated(from: "CreditTransaction.balanceAfter", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `CreditTransaction` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "CreditTransaction.createdAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `amount` field in the `CreditTransaction` table.
  """
  amount_max: Int @fdc_generated(from: "CreditTransaction.amount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `balanceAfter` field in the `CreditTransaction` table.
  """
  balanceAfter_max: Int @fdc_generated(from: "CreditTransaction.balanceAfter", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `CreditTransaction` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "CreditTransaction.createdAt", purpose: QUERY_MAX)
}
extend type Device {
  """
  ✨ List `BioSignalSession` objects in a one-to-many relationship (where `BioSignalSession`.`device` is this object).
  """
  bioSignalSessions_on_device(
    """
    Filter condition to narrow down the query results.
    """
    where: BioSignalSession_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [BioSignalSession_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: BioSignalSession_Having
  ): [BioSignalSession!]! @fdc_generated(from: "BioSignalSession.device", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Device", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Device` table.
  """
  _count: Int! @fdc_generated(from: "Device", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Device` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Device.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Device` table where the `lastSyncAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  lastSyncAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Device.lastSyncAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Device` table where the `manufacturer` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  manufacturer_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Device.manufacturer", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Device` table where the `model` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  model_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Device.model", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Device` table where the `pairedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  pairedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Device.pairedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Device` table where the `serialNumber` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  serialNumber_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Device.serialNumber", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Device` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Device.userId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `lastSyncAt` field in the `Device` table.
  """
  lastSyncAt_min: Timestamp @fdc_generated(from: "Device.lastSyncAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `pairedAt` field in the `Device` table.
  """
  pairedAt_min: Timestamp @fdc_generated(from: "Device.pairedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `lastSyncAt` field in the `Device` table.
  """
  lastSyncAt_max: Timestamp @fdc_generated(from: "Device.lastSyncAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `pairedAt` field in the `Device` table.
  """
  pairedAt_max: Timestamp @fdc_generated(from: "Device.pairedAt", purpose: QUERY_MAX)
}
extend type ManualMoodLog {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "ManualMoodLog", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `ManualMoodLog` table.
  """
  _count: Int! @fdc_generated(from: "ManualMoodLog", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ManualMoodLog` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ManualMoodLog.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ManualMoodLog` table where the `mood` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  mood_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ManualMoodLog.mood", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ManualMoodLog` table where the `notes` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  notes_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ManualMoodLog.notes", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ManualMoodLog` table where the `timestamp` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  timestamp_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ManualMoodLog.timestamp", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `ManualMoodLog` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "ManualMoodLog.userId", purpose: QUERY_COUNT)
  """
  ✨ Minimum of the `timestamp` field in the `ManualMoodLog` table.
  """
  timestamp_min: Timestamp @fdc_generated(from: "ManualMoodLog.timestamp", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `timestamp` field in the `ManualMoodLog` table.
  """
  timestamp_max: Timestamp @fdc_generated(from: "ManualMoodLog.timestamp", purpose: QUERY_MAX)
}
extend type MeasurementSession {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "MeasurementSession", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `MeasurementSession` table.
  """
  _count: Int! @fdc_generated(from: "MeasurementSession", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `companyId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  companyId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.companyId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `duration` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  duration_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.duration", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `focusLevel` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  focusLevel_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.focusLevel", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `measuredById` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  measuredById_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.measuredById", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `overallScore` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  overallScore_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.overallScore", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `processedDataUri` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  processedDataUri_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.processedDataUri", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `rawDataUri` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  rawDataUri_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.rawDataUri", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `reportGenerated` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  reportGenerated_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.reportGenerated", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `sessionDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  sessionDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.sessionDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `sessionTime` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  sessionTime_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.sessionTime", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `stressLevel` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  stressLevel_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.stressLevel", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `subjectBirthDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  subjectBirthDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.subjectBirthDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `subjectName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  subjectName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.subjectName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `subjectPhone` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  subjectPhone_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.subjectPhone", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MeasurementSession` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MeasurementSession.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Sum the `duration` field in the `MeasurementSession` table.
  """
  duration_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "MeasurementSession.duration", purpose: QUERY_SUM)
  """
  ✨ Sum the `focusLevel` field in the `MeasurementSession` table.
  """
  focusLevel_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MeasurementSession.focusLevel", purpose: QUERY_SUM)
  """
  ✨ Sum the `overallScore` field in the `MeasurementSession` table.
  """
  overallScore_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "MeasurementSession.overallScore", purpose: QUERY_SUM)
  """
  ✨ Sum the `stressLevel` field in the `MeasurementSession` table.
  """
  stressLevel_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MeasurementSession.stressLevel", purpose: QUERY_SUM)
  """
  ✨ Average the `duration` field in the `MeasurementSession` table.
  """
  duration_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MeasurementSession.duration", purpose: QUERY_AVG)
  """
  ✨ Average the `focusLevel` field in the `MeasurementSession` table.
  """
  focusLevel_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MeasurementSession.focusLevel", purpose: QUERY_AVG)
  """
  ✨ Average the `overallScore` field in the `MeasurementSession` table.
  """
  overallScore_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MeasurementSession.overallScore", purpose: QUERY_AVG)
  """
  ✨ Average the `stressLevel` field in the `MeasurementSession` table.
  """
  stressLevel_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MeasurementSession.stressLevel", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `MeasurementSession` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "MeasurementSession.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `duration` field in the `MeasurementSession` table.
  """
  duration_min: Int @fdc_generated(from: "MeasurementSession.duration", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `focusLevel` field in the `MeasurementSession` table.
  """
  focusLevel_min: Float @fdc_generated(from: "MeasurementSession.focusLevel", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `overallScore` field in the `MeasurementSession` table.
  """
  overallScore_min: Int @fdc_generated(from: "MeasurementSession.overallScore", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `sessionDate` field in the `MeasurementSession` table.
  """
  sessionDate_min: Date @fdc_generated(from: "MeasurementSession.sessionDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `sessionTime` field in the `MeasurementSession` table.
  """
  sessionTime_min: Timestamp @fdc_generated(from: "MeasurementSession.sessionTime", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `stressLevel` field in the `MeasurementSession` table.
  """
  stressLevel_min: Float @fdc_generated(from: "MeasurementSession.stressLevel", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `subjectBirthDate` field in the `MeasurementSession` table.
  """
  subjectBirthDate_min: Date @fdc_generated(from: "MeasurementSession.subjectBirthDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `MeasurementSession` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "MeasurementSession.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `MeasurementSession` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "MeasurementSession.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `duration` field in the `MeasurementSession` table.
  """
  duration_max: Int @fdc_generated(from: "MeasurementSession.duration", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `focusLevel` field in the `MeasurementSession` table.
  """
  focusLevel_max: Float @fdc_generated(from: "MeasurementSession.focusLevel", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `overallScore` field in the `MeasurementSession` table.
  """
  overallScore_max: Int @fdc_generated(from: "MeasurementSession.overallScore", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `sessionDate` field in the `MeasurementSession` table.
  """
  sessionDate_max: Date @fdc_generated(from: "MeasurementSession.sessionDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `sessionTime` field in the `MeasurementSession` table.
  """
  sessionTime_max: Timestamp @fdc_generated(from: "MeasurementSession.sessionTime", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `stressLevel` field in the `MeasurementSession` table.
  """
  stressLevel_max: Float @fdc_generated(from: "MeasurementSession.stressLevel", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `subjectBirthDate` field in the `MeasurementSession` table.
  """
  subjectBirthDate_max: Date @fdc_generated(from: "MeasurementSession.subjectBirthDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `MeasurementSession` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "MeasurementSession.updatedAt", purpose: QUERY_MAX)
}
extend type MentalHealthReport {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "MentalHealthReport", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table.
  """
  _count: Int! @fdc_generated(from: "MentalHealthReport", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `anxietyIndicators` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  anxietyIndicators_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.anxietyIndicators", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `focusLevel` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  focusLevel_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.focusLevel", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `generatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  generatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.generatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `overallScore` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  overallScore_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.overallScore", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `recommendations` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  recommendations_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.recommendations", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `reportDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  reportDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.reportDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `sleepQualityScore` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  sleepQualityScore_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.sleepQualityScore", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `stressLevel` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  stressLevel_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.stressLevel", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `summaryText` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  summaryText_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.summaryText", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `MentalHealthReport` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "MentalHealthReport.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `focusLevel` field in the `MentalHealthReport` table.
  """
  focusLevel_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MentalHealthReport.focusLevel", purpose: QUERY_SUM)
  """
  ✨ Sum the `overallScore` field in the `MentalHealthReport` table.
  """
  overallScore_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "MentalHealthReport.overallScore", purpose: QUERY_SUM)
  """
  ✨ Sum the `sleepQualityScore` field in the `MentalHealthReport` table.
  """
  sleepQualityScore_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MentalHealthReport.sleepQualityScore", purpose: QUERY_SUM)
  """
  ✨ Sum the `stressLevel` field in the `MentalHealthReport` table.
  """
  stressLevel_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MentalHealthReport.stressLevel", purpose: QUERY_SUM)
  """
  ✨ Average the `focusLevel` field in the `MentalHealthReport` table.
  """
  focusLevel_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MentalHealthReport.focusLevel", purpose: QUERY_AVG)
  """
  ✨ Average the `overallScore` field in the `MentalHealthReport` table.
  """
  overallScore_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MentalHealthReport.overallScore", purpose: QUERY_AVG)
  """
  ✨ Average the `sleepQualityScore` field in the `MentalHealthReport` table.
  """
  sleepQualityScore_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MentalHealthReport.sleepQualityScore", purpose: QUERY_AVG)
  """
  ✨ Average the `stressLevel` field in the `MentalHealthReport` table.
  """
  stressLevel_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "MentalHealthReport.stressLevel", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `focusLevel` field in the `MentalHealthReport` table.
  """
  focusLevel_min: Float @fdc_generated(from: "MentalHealthReport.focusLevel", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `generatedAt` field in the `MentalHealthReport` table.
  """
  generatedAt_min: Timestamp @fdc_generated(from: "MentalHealthReport.generatedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `overallScore` field in the `MentalHealthReport` table.
  """
  overallScore_min: Int @fdc_generated(from: "MentalHealthReport.overallScore", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `reportDate` field in the `MentalHealthReport` table.
  """
  reportDate_min: Date @fdc_generated(from: "MentalHealthReport.reportDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `sleepQualityScore` field in the `MentalHealthReport` table.
  """
  sleepQualityScore_min: Float @fdc_generated(from: "MentalHealthReport.sleepQualityScore", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `stressLevel` field in the `MentalHealthReport` table.
  """
  stressLevel_min: Float @fdc_generated(from: "MentalHealthReport.stressLevel", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `focusLevel` field in the `MentalHealthReport` table.
  """
  focusLevel_max: Float @fdc_generated(from: "MentalHealthReport.focusLevel", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `generatedAt` field in the `MentalHealthReport` table.
  """
  generatedAt_max: Timestamp @fdc_generated(from: "MentalHealthReport.generatedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `overallScore` field in the `MentalHealthReport` table.
  """
  overallScore_max: Int @fdc_generated(from: "MentalHealthReport.overallScore", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `reportDate` field in the `MentalHealthReport` table.
  """
  reportDate_max: Date @fdc_generated(from: "MentalHealthReport.reportDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `sleepQualityScore` field in the `MentalHealthReport` table.
  """
  sleepQualityScore_max: Float @fdc_generated(from: "MentalHealthReport.sleepQualityScore", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `stressLevel` field in the `MentalHealthReport` table.
  """
  stressLevel_max: Float @fdc_generated(from: "MentalHealthReport.stressLevel", purpose: QUERY_MAX)
}
extend type Organization {
  """
  ✨ List `AIReportUsage` objects in a one-to-many relationship (where `AIReportUsage`.`organization` is this object).
  """
  aIReportUsages_on_organization(
    """
    Filter condition to narrow down the query results.
    """
    where: AIReportUsage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [AIReportUsage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: AIReportUsage_Having
  ): [AIReportUsage!]! @fdc_generated(from: "AIReportUsage.organization", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `BusinessMetrics` objects in a one-to-many relationship (where `BusinessMetrics`.`organization` is this object).
  """
  businessMetricss_on_organization(
    """
    Filter condition to narrow down the query results.
    """
    where: BusinessMetrics_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [BusinessMetrics_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: BusinessMetrics_Having
  ): [BusinessMetrics!]! @fdc_generated(from: "BusinessMetrics.organization", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ConsultationUsage` objects in a one-to-many relationship (where `ConsultationUsage`.`organization` is this object).
  """
  consultationUsages_on_organization(
    """
    Filter condition to narrow down the query results.
    """
    where: ConsultationUsage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ConsultationUsage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ConsultationUsage_Having
  ): [ConsultationUsage!]! @fdc_generated(from: "ConsultationUsage.organization", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Contract` objects in a one-to-many relationship (where `Contract`.`organization` is this object).
  """
  contracts_on_organization(
    """
    Filter condition to narrow down the query results.
    """
    where: Contract_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Contract_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Contract_Having
  ): [Contract!]! @fdc_generated(from: "Contract.organization", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `CreditTransaction` objects in a one-to-many relationship (where `CreditTransaction`.`organization` is this object).
  """
  creditTransactions_on_organization(
    """
    Filter condition to narrow down the query results.
    """
    where: CreditTransaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CreditTransaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: CreditTransaction_Having
  ): [CreditTransaction!]! @fdc_generated(from: "CreditTransaction.organization", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `OrganizationMember` objects in a one-to-many relationship (where `OrganizationMember`.`organization` is this object).
  """
  organizationMembers_on_organization(
    """
    Filter condition to narrow down the query results.
    """
    where: OrganizationMember_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [OrganizationMember_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: OrganizationMember_Having
  ): [OrganizationMember!]! @fdc_generated(from: "OrganizationMember.organization", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `TrialService` objects in a one-to-many relationship (where `TrialService`.`organization` is this object).
  """
  trialServices_on_organization(
    """
    Filter condition to narrow down the query results.
    """
    where: TrialService_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [TrialService_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: TrialService_Having
  ): [TrialService!]! @fdc_generated(from: "TrialService.organization", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "Organization", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `Organization` table.
  """
  _count: Int! @fdc_generated(from: "Organization", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `address` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  address_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.address", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `adminUserId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  adminUserId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.adminUserId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `basePrice` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  basePrice_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.basePrice", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `businessNumber` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  businessNumber_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.businessNumber", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `contactEmail` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contactEmail_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.contactEmail", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `contactPhone` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contactPhone_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.contactPhone", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `contractEndDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contractEndDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.contractEndDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `contractStartDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  contractStartDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.contractStartDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `creditBalance` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  creditBalance_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.creditBalance", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `discountedPrice` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  discountedPrice_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.discountedPrice", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `isTrialActive` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isTrialActive_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.isTrialActive", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `name` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  name_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.name", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `servicePackage` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  servicePackage_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.servicePackage", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `settings` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  settings_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.settings", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `status` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  status_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.status", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `totalMemberCount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  totalMemberCount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.totalMemberCount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `trialCreditsTotal` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  trialCreditsTotal_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.trialCreditsTotal", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `trialCreditsUsed` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  trialCreditsUsed_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.trialCreditsUsed", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `trialEndDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  trialEndDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.trialEndDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `trialStartDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  trialStartDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.trialStartDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `trialType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  trialType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.trialType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `Organization` table where the `volumeTier` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  volumeTier_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "Organization.volumeTier", purpose: QUERY_COUNT)
  """
  ✨ Sum the `basePrice` field in the `Organization` table.
  """
  basePrice_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Organization.basePrice", purpose: QUERY_SUM)
  """
  ✨ Sum the `creditBalance` field in the `Organization` table.
  """
  creditBalance_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Organization.creditBalance", purpose: QUERY_SUM)
  """
  ✨ Sum the `discountedPrice` field in the `Organization` table.
  """
  discountedPrice_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Organization.discountedPrice", purpose: QUERY_SUM)
  """
  ✨ Sum the `totalMemberCount` field in the `Organization` table.
  """
  totalMemberCount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Organization.totalMemberCount", purpose: QUERY_SUM)
  """
  ✨ Sum the `trialCreditsTotal` field in the `Organization` table.
  """
  trialCreditsTotal_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Organization.trialCreditsTotal", purpose: QUERY_SUM)
  """
  ✨ Sum the `trialCreditsUsed` field in the `Organization` table.
  """
  trialCreditsUsed_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "Organization.trialCreditsUsed", purpose: QUERY_SUM)
  """
  ✨ Average the `basePrice` field in the `Organization` table.
  """
  basePrice_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Organization.basePrice", purpose: QUERY_AVG)
  """
  ✨ Average the `creditBalance` field in the `Organization` table.
  """
  creditBalance_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Organization.creditBalance", purpose: QUERY_AVG)
  """
  ✨ Average the `discountedPrice` field in the `Organization` table.
  """
  discountedPrice_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Organization.discountedPrice", purpose: QUERY_AVG)
  """
  ✨ Average the `totalMemberCount` field in the `Organization` table.
  """
  totalMemberCount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Organization.totalMemberCount", purpose: QUERY_AVG)
  """
  ✨ Average the `trialCreditsTotal` field in the `Organization` table.
  """
  trialCreditsTotal_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Organization.trialCreditsTotal", purpose: QUERY_AVG)
  """
  ✨ Average the `trialCreditsUsed` field in the `Organization` table.
  """
  trialCreditsUsed_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "Organization.trialCreditsUsed", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `basePrice` field in the `Organization` table.
  """
  basePrice_min: Int @fdc_generated(from: "Organization.basePrice", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `contractEndDate` field in the `Organization` table.
  """
  contractEndDate_min: Date @fdc_generated(from: "Organization.contractEndDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `contractStartDate` field in the `Organization` table.
  """
  contractStartDate_min: Date @fdc_generated(from: "Organization.contractStartDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `Organization` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "Organization.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `creditBalance` field in the `Organization` table.
  """
  creditBalance_min: Int @fdc_generated(from: "Organization.creditBalance", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `discountedPrice` field in the `Organization` table.
  """
  discountedPrice_min: Int @fdc_generated(from: "Organization.discountedPrice", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `totalMemberCount` field in the `Organization` table.
  """
  totalMemberCount_min: Int @fdc_generated(from: "Organization.totalMemberCount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `trialCreditsTotal` field in the `Organization` table.
  """
  trialCreditsTotal_min: Int @fdc_generated(from: "Organization.trialCreditsTotal", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `trialCreditsUsed` field in the `Organization` table.
  """
  trialCreditsUsed_min: Int @fdc_generated(from: "Organization.trialCreditsUsed", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `trialEndDate` field in the `Organization` table.
  """
  trialEndDate_min: Date @fdc_generated(from: "Organization.trialEndDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `trialStartDate` field in the `Organization` table.
  """
  trialStartDate_min: Date @fdc_generated(from: "Organization.trialStartDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `Organization` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "Organization.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `basePrice` field in the `Organization` table.
  """
  basePrice_max: Int @fdc_generated(from: "Organization.basePrice", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `contractEndDate` field in the `Organization` table.
  """
  contractEndDate_max: Date @fdc_generated(from: "Organization.contractEndDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `contractStartDate` field in the `Organization` table.
  """
  contractStartDate_max: Date @fdc_generated(from: "Organization.contractStartDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `Organization` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "Organization.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `creditBalance` field in the `Organization` table.
  """
  creditBalance_max: Int @fdc_generated(from: "Organization.creditBalance", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `discountedPrice` field in the `Organization` table.
  """
  discountedPrice_max: Int @fdc_generated(from: "Organization.discountedPrice", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `totalMemberCount` field in the `Organization` table.
  """
  totalMemberCount_max: Int @fdc_generated(from: "Organization.totalMemberCount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `trialCreditsTotal` field in the `Organization` table.
  """
  trialCreditsTotal_max: Int @fdc_generated(from: "Organization.trialCreditsTotal", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `trialCreditsUsed` field in the `Organization` table.
  """
  trialCreditsUsed_max: Int @fdc_generated(from: "Organization.trialCreditsUsed", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `trialEndDate` field in the `Organization` table.
  """
  trialEndDate_max: Date @fdc_generated(from: "Organization.trialEndDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `trialStartDate` field in the `Organization` table.
  """
  trialStartDate_max: Date @fdc_generated(from: "Organization.trialStartDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `Organization` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "Organization.updatedAt", purpose: QUERY_MAX)
}
extend type OrganizationMember {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "OrganizationMember", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `OrganizationMember` table.
  """
  _count: Int! @fdc_generated(from: "OrganizationMember", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `consultationsUsed` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  consultationsUsed_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.consultationsUsed", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `department` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  department_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.department", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `employeeId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  employeeId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.employeeId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `isActive` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isActive_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.isActive", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `joinedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  joinedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.joinedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `lastActivityAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  lastActivityAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.lastActivityAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `organizationId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  organizationId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.organizationId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `position` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  position_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.position", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `reportsGenerated` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  reportsGenerated_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.reportsGenerated", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `OrganizationMember` table where the `userId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "OrganizationMember.userId", purpose: QUERY_COUNT)
  """
  ✨ Sum the `consultationsUsed` field in the `OrganizationMember` table.
  """
  consultationsUsed_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "OrganizationMember.consultationsUsed", purpose: QUERY_SUM)
  """
  ✨ Sum the `reportsGenerated` field in the `OrganizationMember` table.
  """
  reportsGenerated_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "OrganizationMember.reportsGenerated", purpose: QUERY_SUM)
  """
  ✨ Average the `consultationsUsed` field in the `OrganizationMember` table.
  """
  consultationsUsed_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "OrganizationMember.consultationsUsed", purpose: QUERY_AVG)
  """
  ✨ Average the `reportsGenerated` field in the `OrganizationMember` table.
  """
  reportsGenerated_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "OrganizationMember.reportsGenerated", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `consultationsUsed` field in the `OrganizationMember` table.
  """
  consultationsUsed_min: Int @fdc_generated(from: "OrganizationMember.consultationsUsed", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `joinedAt` field in the `OrganizationMember` table.
  """
  joinedAt_min: Timestamp @fdc_generated(from: "OrganizationMember.joinedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `lastActivityAt` field in the `OrganizationMember` table.
  """
  lastActivityAt_min: Timestamp @fdc_generated(from: "OrganizationMember.lastActivityAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `reportsGenerated` field in the `OrganizationMember` table.
  """
  reportsGenerated_min: Int @fdc_generated(from: "OrganizationMember.reportsGenerated", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `consultationsUsed` field in the `OrganizationMember` table.
  """
  consultationsUsed_max: Int @fdc_generated(from: "OrganizationMember.consultationsUsed", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `joinedAt` field in the `OrganizationMember` table.
  """
  joinedAt_max: Timestamp @fdc_generated(from: "OrganizationMember.joinedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `lastActivityAt` field in the `OrganizationMember` table.
  """
  lastActivityAt_max: Timestamp @fdc_generated(from: "OrganizationMember.lastActivityAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `reportsGenerated` field in the `OrganizationMember` table.
  """
  reportsGenerated_max: Int @fdc_generated(from: "OrganizationMember.reportsGenerated", purpose: QUERY_MAX)
}
extend type TrialService {
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "TrialService", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `TrialService` table.
  """
  _count: Int! @fdc_generated(from: "TrialService", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `conversionDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  conversionDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.conversionDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `conversionDiscount` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  conversionDiscount_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.conversionDiscount", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `creditsUsed` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  creditsUsed_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.creditsUsed", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `endDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  endDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.endDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `isActive` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isActive_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.isActive", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `maxCredits` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  maxCredits_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.maxCredits", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `organizationId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  organizationId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.organizationId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `remainingCredits` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  remainingCredits_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.remainingCredits", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `startDate` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  startDate_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.startDate", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `trialType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  trialType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.trialType", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `TrialService` table where the `validityDays` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  validityDays_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "TrialService.validityDays", purpose: QUERY_COUNT)
  """
  ✨ Sum the `conversionDiscount` field in the `TrialService` table.
  """
  conversionDiscount_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "TrialService.conversionDiscount", purpose: QUERY_SUM)
  """
  ✨ Sum the `creditsUsed` field in the `TrialService` table.
  """
  creditsUsed_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "TrialService.creditsUsed", purpose: QUERY_SUM)
  """
  ✨ Sum the `maxCredits` field in the `TrialService` table.
  """
  maxCredits_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "TrialService.maxCredits", purpose: QUERY_SUM)
  """
  ✨ Sum the `remainingCredits` field in the `TrialService` table.
  """
  remainingCredits_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "TrialService.remainingCredits", purpose: QUERY_SUM)
  """
  ✨ Sum the `validityDays` field in the `TrialService` table.
  """
  validityDays_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "TrialService.validityDays", purpose: QUERY_SUM)
  """
  ✨ Average the `conversionDiscount` field in the `TrialService` table.
  """
  conversionDiscount_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "TrialService.conversionDiscount", purpose: QUERY_AVG)
  """
  ✨ Average the `creditsUsed` field in the `TrialService` table.
  """
  creditsUsed_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "TrialService.creditsUsed", purpose: QUERY_AVG)
  """
  ✨ Average the `maxCredits` field in the `TrialService` table.
  """
  maxCredits_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "TrialService.maxCredits", purpose: QUERY_AVG)
  """
  ✨ Average the `remainingCredits` field in the `TrialService` table.
  """
  remainingCredits_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "TrialService.remainingCredits", purpose: QUERY_AVG)
  """
  ✨ Average the `validityDays` field in the `TrialService` table.
  """
  validityDays_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "TrialService.validityDays", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `conversionDate` field in the `TrialService` table.
  """
  conversionDate_min: Date @fdc_generated(from: "TrialService.conversionDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `conversionDiscount` field in the `TrialService` table.
  """
  conversionDiscount_min: Int @fdc_generated(from: "TrialService.conversionDiscount", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `createdAt` field in the `TrialService` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "TrialService.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `creditsUsed` field in the `TrialService` table.
  """
  creditsUsed_min: Int @fdc_generated(from: "TrialService.creditsUsed", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `endDate` field in the `TrialService` table.
  """
  endDate_min: Date @fdc_generated(from: "TrialService.endDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `maxCredits` field in the `TrialService` table.
  """
  maxCredits_min: Int @fdc_generated(from: "TrialService.maxCredits", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `remainingCredits` field in the `TrialService` table.
  """
  remainingCredits_min: Int @fdc_generated(from: "TrialService.remainingCredits", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `startDate` field in the `TrialService` table.
  """
  startDate_min: Date @fdc_generated(from: "TrialService.startDate", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `TrialService` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "TrialService.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `validityDays` field in the `TrialService` table.
  """
  validityDays_min: Int @fdc_generated(from: "TrialService.validityDays", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `conversionDate` field in the `TrialService` table.
  """
  conversionDate_max: Date @fdc_generated(from: "TrialService.conversionDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `conversionDiscount` field in the `TrialService` table.
  """
  conversionDiscount_max: Int @fdc_generated(from: "TrialService.conversionDiscount", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `createdAt` field in the `TrialService` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "TrialService.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `creditsUsed` field in the `TrialService` table.
  """
  creditsUsed_max: Int @fdc_generated(from: "TrialService.creditsUsed", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `endDate` field in the `TrialService` table.
  """
  endDate_max: Date @fdc_generated(from: "TrialService.endDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `maxCredits` field in the `TrialService` table.
  """
  maxCredits_max: Int @fdc_generated(from: "TrialService.maxCredits", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `remainingCredits` field in the `TrialService` table.
  """
  remainingCredits_max: Int @fdc_generated(from: "TrialService.remainingCredits", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `startDate` field in the `TrialService` table.
  """
  startDate_max: Date @fdc_generated(from: "TrialService.startDate", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `TrialService` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "TrialService.updatedAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `validityDays` field in the `TrialService` table.
  """
  validityDays_max: Int @fdc_generated(from: "TrialService.validityDays", purpose: QUERY_MAX)
}
extend type User {
  """
  ✨ List `AIReportUsage` objects in a one-to-many relationship (where `AIReportUsage`.`user` is this object).
  """
  aIReportUsages_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: AIReportUsage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [AIReportUsage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: AIReportUsage_Having
  ): [AIReportUsage!]! @fdc_generated(from: "AIReportUsage.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `BioSignalSession` objects in a one-to-many relationship (where `BioSignalSession`.`user` is this object).
  """
  bioSignalSessions_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: BioSignalSession_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [BioSignalSession_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: BioSignalSession_Having
  ): [BioSignalSession!]! @fdc_generated(from: "BioSignalSession.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `CompanyMember` objects in a one-to-many relationship (where `CompanyMember`.`user` is this object).
  """
  companyMembers_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: CompanyMember_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CompanyMember_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: CompanyMember_Having
  ): [CompanyMember!]! @fdc_generated(from: "CompanyMember.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ConsultationUsage` objects in a one-to-many relationship (where `ConsultationUsage`.`user` is this object).
  """
  consultationUsages_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: ConsultationUsage_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ConsultationUsage_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ConsultationUsage_Having
  ): [ConsultationUsage!]! @fdc_generated(from: "ConsultationUsage.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Contract` objects in a one-to-many relationship (where `Contract`.`signedBy` is this object).
  """
  contracts_on_signedBy(
    """
    Filter condition to narrow down the query results.
    """
    where: Contract_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Contract_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Contract_Having
  ): [Contract!]! @fdc_generated(from: "Contract.signedBy", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `CreditTransaction` objects in a one-to-many relationship (where `CreditTransaction`.`createdBy` is this object).
  """
  creditTransactions_on_createdBy(
    """
    Filter condition to narrow down the query results.
    """
    where: CreditTransaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CreditTransaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: CreditTransaction_Having
  ): [CreditTransaction!]! @fdc_generated(from: "CreditTransaction.createdBy", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `CreditTransaction` objects in a one-to-many relationship (where `CreditTransaction`.`user` is this object).
  """
  creditTransactions_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: CreditTransaction_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [CreditTransaction_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: CreditTransaction_Having
  ): [CreditTransaction!]! @fdc_generated(from: "CreditTransaction.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Device` objects in a one-to-many relationship (where `Device`.`user` is this object).
  """
  devices_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: Device_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Device_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Device_Having
  ): [Device!]! @fdc_generated(from: "Device.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `ManualMoodLog` objects in a one-to-many relationship (where `ManualMoodLog`.`user` is this object).
  """
  manualMoodLogs_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: ManualMoodLog_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [ManualMoodLog_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: ManualMoodLog_Having
  ): [ManualMoodLog!]! @fdc_generated(from: "ManualMoodLog.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `MeasurementSession` objects in a one-to-many relationship (where `MeasurementSession`.`measuredBy` is this object).
  """
  measurementSessions_on_measuredBy(
    """
    Filter condition to narrow down the query results.
    """
    where: MeasurementSession_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MeasurementSession_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MeasurementSession_Having
  ): [MeasurementSession!]! @fdc_generated(from: "MeasurementSession.measuredBy", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `MentalHealthReport` objects in a one-to-many relationship (where `MentalHealthReport`.`user` is this object).
  """
  mentalHealthReports_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: MentalHealthReport_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [MentalHealthReport_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: MentalHealthReport_Having
  ): [MentalHealthReport!]! @fdc_generated(from: "MentalHealthReport.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `Organization` objects in a one-to-many relationship (where `Organization`.`adminUser` is this object).
  """
  organizations_on_adminUser(
    """
    Filter condition to narrow down the query results.
    """
    where: Organization_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Organization_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Organization_Having
  ): [Organization!]! @fdc_generated(from: "Organization.adminUser", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  ✨ List `OrganizationMember` objects in a one-to-many relationship (where `OrganizationMember`.`user` is this object).
  """
  organizationMembers_on_user(
    """
    Filter condition to narrow down the query results.
    """
    where: OrganizationMember_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [OrganizationMember_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: OrganizationMember_Having
  ): [OrganizationMember!]! @fdc_generated(from: "OrganizationMember.user", purpose: QUERY_MULTIPLE_ONE_TO_MANY)
  """
  Implicit metadata field that cannot be written. It provides extra information about query results.
  """
  _metadata: _Metadata @fdc_generated(from: "User", purpose: METADATA_FIELD)
  """
  ✨ Count the number of rows in the `User` table.
  """
  _count: Int! @fdc_generated(from: "User", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `accessToken` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  accessToken_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.accessToken", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `address` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  address_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.address", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `createdAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  createdAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.createdAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `department` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  department_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.department", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `displayName` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  displayName_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.displayName", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `email` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  email_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.email", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `employeeId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  employeeId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.employeeId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `id` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  id_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.id", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `isActive` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  isActive_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.isActive", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `lastLoginAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  lastLoginAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.lastLoginAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `organizationCode` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  organizationCode_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.organizationCode", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `organizationId` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  organizationId_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.organizationId", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `permissions` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  permissions_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.permissions", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `personalCreditBalance` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  personalCreditBalance_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.personalCreditBalance", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `phone` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  phone_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.phone", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `position` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  position_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.position", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `profileImage` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  profileImage_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.profileImage", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `tokenExpiresAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  tokenExpiresAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.tokenExpiresAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `updatedAt` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  updatedAt_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.updatedAt", purpose: QUERY_COUNT)
  """
  ✨ Count the number of rows in the `User` table where the `userType` field is non-null. Pass the `distinct` argument to instead count the number of distinct values.
  """
  userType_count(
    """
    Set to true to count the number of distinct values.
    """
    distinct: Boolean = false
  ): Int! @fdc_generated(from: "User.userType", purpose: QUERY_COUNT)
  """
  ✨ Sum the `personalCreditBalance` field in the `User` table.
  """
  personalCreditBalance_sum(
    """
    Set to true to sum the distinct values.
    """
    distinct: Boolean = false
  ): Int @fdc_generated(from: "User.personalCreditBalance", purpose: QUERY_SUM)
  """
  ✨ Average the `personalCreditBalance` field in the `User` table.
  """
  personalCreditBalance_avg(
    """
    Set to true to average the distinct values.
    """
    distinct: Boolean = false
  ): Float @fdc_generated(from: "User.personalCreditBalance", purpose: QUERY_AVG)
  """
  ✨ Minimum of the `createdAt` field in the `User` table.
  """
  createdAt_min: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `lastLoginAt` field in the `User` table.
  """
  lastLoginAt_min: Timestamp @fdc_generated(from: "User.lastLoginAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `personalCreditBalance` field in the `User` table.
  """
  personalCreditBalance_min: Int @fdc_generated(from: "User.personalCreditBalance", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `tokenExpiresAt` field in the `User` table.
  """
  tokenExpiresAt_min: Timestamp @fdc_generated(from: "User.tokenExpiresAt", purpose: QUERY_MIN)
  """
  ✨ Minimum of the `updatedAt` field in the `User` table.
  """
  updatedAt_min: Timestamp @fdc_generated(from: "User.updatedAt", purpose: QUERY_MIN)
  """
  ✨ Maximum of the `createdAt` field in the `User` table.
  """
  createdAt_max: Timestamp @fdc_generated(from: "User.createdAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `lastLoginAt` field in the `User` table.
  """
  lastLoginAt_max: Timestamp @fdc_generated(from: "User.lastLoginAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `personalCreditBalance` field in the `User` table.
  """
  personalCreditBalance_max: Int @fdc_generated(from: "User.personalCreditBalance", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `tokenExpiresAt` field in the `User` table.
  """
  tokenExpiresAt_max: Timestamp @fdc_generated(from: "User.tokenExpiresAt", purpose: QUERY_MAX)
  """
  ✨ Maximum of the `updatedAt` field in the `User` table.
  """
  updatedAt_max: Timestamp @fdc_generated(from: "User.updatedAt", purpose: QUERY_MAX)
}
